To create two APIs for performing CRUD operations on the Customer and Card collections in MongoDB, you can follow the project structure mentioned below:

```
project/
├── controllers/
│   ├── customerController.js
│   └── cardController.js
├── middlewares/
│   └── authMiddleware.js
├── models/
│   ├── customerModel.js
│   └── cardModel.js
├── services/
│   ├── customerService.js
│   └── cardService.js
├── routes/
│   ├── customerRoutes.js
│   └── cardRoutes.js
└── server.js
```

- `controllers`: This directory contains the controllers responsible for handling the API requests and responses.
- `middlewares`: This directory contains the middleware files. For example, `authMiddleware.js` can be used for authentication and authorization.
- `models`: This directory contains the model files that define the schema and interact with the MongoDB collections.
- `services`: This directory contains the service files that encapsulate the business logic and interact with the models.
- `routes`: This directory contains the route files that define the API endpoints and their corresponding controllers.
- `server.js`: This is the entry point of your application where you set up the Express server and configure the routes.

Now, let's define the MongoDB queries for the specified CRUD operations in each collection.

**Customer API**

1. Get all customers with status ACTIVE [GET]
   - MongoDB Query:
   ```javascript
   db.customers.find({ status: "ACTIVE" })
   ```

2. Delete customer [DELETE]
   - MongoDB Query:
   ```javascript
   db.customers.deleteOne({ customerID: "<customerID>" })
   ```

3. Create new customer [POST]
   - MongoDB Query:
   ```javascript
   db.customers.insertOne({
     firstName: "<firstName>",
     lastName: "<lastName>",
     mobileNumber: "<mobileNumber>",
     DOB: new Date("<DOB>"),
     emailID: "<emailID>",
     address: "<address>",
     customerID: "<customerID>",
     status: "ACTIVE"
   })
   ```

**Card API**

1. Get all Card List [GET]
   - MongoDB Query:
   ```javascript
   db.cards.find({})
   ```

2. Create new card [POST]
   - MongoDB Query:
   ```javascript
   db.cards.insertOne({
     cardNumber: "<cardNumber>",
     cardType: "<cardType>",
     customerName: "<customerName>",
     status: "ACTIVE",
     vision: "<vision>",
     customerID: "<customerID>"
   })
   ```

Please note that you need to replace the placeholders (e.g., `<firstName>`, `<lastName>`, `<mobileNumber>`) with the actual values when executing the queries.

In addition to the above, you would need to set up the Express server, configure the routes, implement the controllers and services, and handle the request/response logic in your application.
